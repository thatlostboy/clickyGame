{"version":3,"sources":["components/Navbar.js","components/Footer.js","components/PicCard.js","components/PicContainer.js","App.js","serviceWorker.js","index.js"],"names":["Navbar","react_default","a","createElement","className","href","this","props","score","highScore","Component","Footer","PicCard","_this","onClick","shufflePics","id","alt","name","src","imgUrl","PicContainer","friendList","map","friend","src_components_PicCard","key","image","App","state","friends","clicked","console","log","indexOf","push","arra1","temp","index","ctr","length","Math","floor","random","shuffle","setState","components_Navbar","src_components_PicContainer","components_Footer","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"2kFA4BeA,0LAvBX,OACJC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,+CAEbH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,cACZH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,YACZH,EAAAC,EAAAC,cAAA,KAAGC,UAAU,eAAeC,KAAK,KAAjC,UAGJJ,EAAAC,EAAAC,cAAA,MAAIC,UAAU,sBACZH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,YACZH,EAAAC,EAAAC,cAAA,KAAGC,UAAU,eAAeC,KAAK,KAAjC,iBAGJJ,EAAAC,EAAAC,cAAA,MAAIC,UAAU,sBACZH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,YACZH,EAAAC,EAAAC,cAAA,QAAMC,UAAU,gBAAhB,UAAuCE,KAAKC,MAAMC,MAAlD,iBAAuEF,KAAKC,MAAME,qBAjBnEC,cCQNC,mLANX,OACEV,EAAAC,EAAAC,cAAA,4CAHeO,aCgBNE,gMAfJ,IAAAC,EAAAP,KAEP,OAEML,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OAAOU,QAAS,kBAAKD,EAAKN,MAAMQ,YAAYF,EAAKN,MAAMS,MACpEf,EAAAC,EAAAC,cAAA,OAAKC,UAAU,iBACbH,EAAAC,EAAAC,cAAA,OAAKc,IAAKX,KAAKC,MAAMW,KAAMC,IAAKb,KAAKC,MAAMa,kBAPnCV,cCuBLW,mLApBN,IAAAR,EAAAP,KACP,OACEL,EAAAC,EAAAC,cAAA,OAAKC,UAAU,WACZE,KAAKC,MAAMe,WAAWC,IAAI,SAAAC,GAAM,OAC7BvB,EAAAC,EAAAC,cAACsB,EAAD,CACET,GAAMQ,EAAOR,GACbU,IAAOF,EAAOR,GACdE,KAAQM,EAAON,KACfE,OAAUI,EAAOG,MACjBZ,YAAeF,EAAKN,MAAMQ,wBAZbL,wBCoFZkB,6MAvDbC,MAAQ,CACNC,UACArB,UAAW,EACXD,MAAO,EACPuB,QAAS,MAGXhB,YAAc,SAAAC,GACZ,IAAIR,EAAOC,EAAWsB,EACtBtB,EAAYI,EAAKgB,MAAMpB,UAEvBuB,QAAQC,IAAIpB,EAAKgB,OACjBG,QAAQC,IAAI,oBACRpB,EAAKgB,MAAME,QAAQG,QAAQlB,IAAO,GACpCgB,QAAQC,IAAIF,GACZC,QAAQC,IAAI,oBAAoBjB,EAAG,YACnCe,EAAU,GACNlB,EAAKgB,MAAMrB,MAAQK,EAAKgB,MAAMpB,YAChCA,EAAYI,EAAKgB,MAAMrB,OAEzBA,EAAQ,IAERwB,QAAQC,IAAI,0BAA2BpB,EAAKgB,MAAME,SAClDlB,EAAKgB,MAAME,QAAQI,KAAKnB,GACxBR,EAAQK,EAAKgB,MAAMrB,MAAQ,EAC3BuB,EAAUlB,EAAKgB,MAAME,SAKvB,IAAMD,EArDV,SAAiBM,GAIf,IAHA,IAAwBC,EAAMC,EAA1BC,EAAMH,EAAMI,OAGTD,EAAM,GAEXD,EAAQG,KAAKC,MAAMD,KAAKE,SAAWJ,GAInCF,EAAOD,IAFPG,GAGAH,EAAMG,GAAOH,EAAME,GACnBF,EAAME,GAASD,EAEjB,OAAOD,EAuCWQ,CAAQ/B,EAAKgB,MAAMC,SAEnCjB,EAAKgC,SACH,CAACf,UAAQtB,QAAOC,YAAWsB,qFAM7B,OACE9B,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAAC2C,EAAD,CACErC,UAAaH,KAAKuB,MAAMpB,UACxBD,MAASF,KAAKuB,MAAMrB,QAEtBP,EAAAC,EAAAC,cAAC4C,EAAD,CACEzB,WAAYhB,KAAKuB,MAAMC,QACvBf,YAAeT,KAAKS,cAEtBd,EAAAC,EAAAC,cAAC6C,EAAD,cAnDUtC,aClBEuC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOtD,EAAAC,EAAAC,cAACqD,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.6e072040.chunk.js","sourcesContent":["import React, { Component } from 'react';\n// import './App.css';\n\nclass Navbar extends Component {\n  render() {\n    return (\n<nav className=\"navbar navbar-expand-sm bg-dark navbar-dark\">\n  \n  <ul className=\"navbar-nav\">\n    <li className=\"nav-item\">\n      <a className=\"navbar-brand\" href=\"/\">Logo</a>\n    </li>\n  </ul>\n  <ul className=\"navbar-nav mx-auto\">\n    <li className=\"nav-item\">\n      <a className=\"navbar-brand\" href=\"/\">Clicky Game</a>\n    </li>\n  </ul>\n  <ul className=\"navbar-nav ml-auto\">\n    <li className=\"nav-item\">\n      <span className=\"navbar-brand\">Score: {this.props.score} | HighScore: {this.props.highScore}</span>\n    </li>\n  </ul>\n</nav>\n    );\n  }\n}\n\nexport default Navbar;\n","import React, { Component } from 'react';\n// import './App.css';\n\nclass Footer extends Component {\n  render() {\n    return (\n      <h5>Footer here for testing</h5>\n    );\n  }\n}\n\nexport default Footer;\n","import React, { Component } from 'react';\nimport \"./PicCard.css\";\n\nclass PicCard extends Component {\n  render() {\n    // console.log(\"hello\", this.props.id)\n    return (\n  \n          <div className=\"card\" onClick={()=> this.props.shufflePics(this.props.id)}>\n            <div className=\"img-container\">\n              <img alt={this.props.name} src={this.props.imgUrl} />\n            </div>\n          </div>\n\n\n    );\n  }\n}\n\nexport default PicCard;\n","import React, { Component } from 'react'\nimport \"./PicContainer.css\"\nimport PicCard from \"./PicCard\"\nclass PicContainer extends Component {\n\n\n  render() {\n    return (\n      <div className=\"wrapper\">\n        {this.props.friendList.map(friend => (\n            <PicCard \n              id = {friend.id}\n              key = {friend.id}\n              name = {friend.name}\n              imgUrl = {friend.image}\n              shufflePics = {this.props.shufflePics}\n            />\n          )\n          )}\n      </div>\n        \n        \n      );\n    }\n  }\n  \n  export default PicContainer;\n","import React, { Component } from 'react';\nimport './App.css';\nimport Navbar from \"./components/Navbar\"\nimport Footer from \"./components/Footer\"\nimport PicContainer from \"./components/PicContainer\"\nimport friends from \"./friends.json\"\n\n//https://www.w3resource.com/javascript-exercises/javascript-array-exercise-17.php\n// implementation of fischer yates\nfunction shuffle(arra1) {\n  var ctr = arra1.length, temp, index;\n\n  // While there are elements in the array\n  while (ctr > 0) {\n    // Pick a random index\n    index = Math.floor(Math.random() * ctr);\n    // Decrease ctr by 1\n    ctr--;\n    // And swap the last element with it\n    temp = arra1[ctr];\n    arra1[ctr] = arra1[index];\n    arra1[index] = temp;\n  }\n  return arra1;\n}\n\n\n\n\n\nclass App extends Component {\n\n  state = {\n    friends,\n    highScore: 0,\n    score: 0,\n    clicked: []\n  }\n\n  shufflePics = id => {\n    let score, highScore, clicked\n    highScore = this.state.highScore\n    // check if clicked friends already\n    console.log(this.state)\n    console.log(\"\\n------------\\n\")\n    if (this.state.clicked.indexOf(id) > -1) {\n      console.log(clicked)\n      console.log(\"You have clicked \",id,\" already\")\n      clicked = []\n      if (this.state.score > this.state.highScore){\n        highScore = this.state.score\n      } \n      score = 0\n    } else {\n      console.log(\"Add it to array clcked \", this.state.clicked)\n      this.state.clicked.push(id)\n      score = this.state.score + 1\n      clicked = this.state.clicked\n    }\n\n\n    // shuffle the friends\n    const friends = shuffle(this.state.friends)\n\n    this.setState(\n      {friends,score, highScore, clicked}\n      )\n    \n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <Navbar \n          highScore = {this.state.highScore}\n          score = {this.state.score}\n        />\n        <PicContainer\n          friendList={this.state.friends}\n          shufflePics = {this.shufflePics}\n        />\n        <Footer />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}